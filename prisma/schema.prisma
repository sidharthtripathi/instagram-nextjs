// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}


model User{
  id String @id @default(cuid())
  name String
  username String @unique
  password String
  email String @unique
  avatar String?
  about String @default("I am on Insta")

  postCount Int @default(0)
  followersCount Int @default(0)
  followingsCount Int @default(0)

  
  followers User[]  @relation("UserFollows")
  followings  User[]  @relation("UserFollows")

  posts Post[] @relation("createdPost")
  comments Comment[]

  likedPosts Post[] @relation("likes")

  bookmarks Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt



  
}


model Post{
  id String @id @default(cuid())
  caption String?
  postURL String

  authorID String
  author User @relation("createdPost",references: [id],fields: [authorID])

  comments Comment[]
  commentsCount Int @default(0)


  likesCount Int @default(0)
  likedBy User[] @relation("likes")

  bookmarkedBy User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment{
  id String @id @default(cuid())
  comment String
  post Post? @relation(references: [id],fields: [postId])
  postId String?
  author User @relation(references: [id],fields: [authorId])
  authorId String

  comments Comment[] @relation("comment")
  commentedTo Comment? @relation("comment",references: [id],fields: [commentedToCommentId])
  commentedToCommentId String?
  repliesCount Int @default(0)
}
